import * as uuid from 'uuid';
//
import IUserProps from './user.types';
/**
 * User model
 * @module user/model
 */

/**
 * User instance type
 * @typedef {Object} User
 * @property {String} id user id
 * @property {String} name user name
 * @property {String} login user login
 * @property {String} password user password
 */

/** Class User representing a user */
class User {
  id: string;

  name: string;
  
  login: string;

  password: string;

  /**
   * Creates a User instance
   * @type {User}
   * @param {Object} [props={}] object containing user properties
   * @param {String} [props.id] user id (auto-generated by uuid by default)
   * @param {String} [props.name = 'USER'] user name
   * @param {String} [props.login = 'user'] user login
   * @param {String} [props.password = 'P@55w0rd'] user password
   */
   constructor({
    id = uuid.v4(),
    name = 'USER',
    login = 'user',
    password = 'P@55w0rd',
  }: IUserProps = {}) {
    this.id = id;
    this.name = name;
    this.login = login;
    this.password = password;
  }

  /**
   * Strips provided userInstance to basic properties and returns an object without password
   * @param {User} userInstance user instance
   * @returns {Object} object without password field
   */
  static toResponse(
    user: User
  ): {
    id: string;
    name: string;
    login: string;
  } {
    const { id, name, login } = user;

    return { id, name, login };
  }
}

export default User;
